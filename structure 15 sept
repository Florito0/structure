<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Planning de Planification des Structures</title>
    
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://npmcdn.com/flatpickr/dist/l10n/fr.js"></script>

    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

        :root {
            --primary-color: #007bff;
            --secondary-color: #6c757d;
            --background-color: #f8f9fa;
            --surface-color: #ffffff;
            --border-color: #dee2e6;
            --text-color: #212529;
            --preparation-bg: #e9ecef;
        }
        
        /* Assure un défilement normal pour toute la page */
        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            margin: 0;
            padding: 1rem;
            font-size: 14px;
        }

        /* --- FORMULAIRE --- */
        .controls-container {
            background-color: var(--surface-color);
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }
        
        .controls-container h1 {
            margin-top: 0;
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
            gap: 1rem 1.5rem;
        }

        .form-field { display: flex; flex-direction: column; }
        .form-field label { font-weight: 500; margin-bottom: 0.5rem; }

        .form-field input,
        .form-field select {
            padding: 0.6rem;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            font-size: 1em;
            width: 100%;
            box-sizing: border-box;
            background-color: #fff;
        }

        .form-field input:focus,
        .form-field select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
        }

        .form-actions {
            grid-column: 1 / -1;
            display: flex;
            justify-content: flex-end;
            margin-top: 1rem;
        }

        .form-actions button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            font-size: 1em;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .form-actions button:hover { background-color: #0056b3; }

        /* --- PLANNING --- */
        .planning-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .nav-controls { display: flex; align-items: center; gap: 0.5rem; }
        #currentMonthYear { font-size: 1.25rem; font-weight: 600; min-width: 150px; text-align: center; }
        
        .view-switcher button {
             background-color: var(--surface-color);
             border: 1px solid var(--border-color);
             padding: 0.5rem 1rem;
             cursor: pointer;
        }
        .view-switcher button.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }
        .view-switcher button:first-child { border-radius: 6px 0 0 6px; }
        .view-switcher button:last-child { border-radius: 0 6px 6px 0; }
        
        /* Conteneur planning avec barre de défilement horizontal toujours visible */
        .planning-container {
            position: relative; 
            overflow-x: scroll; /* Force la barre de défilement horizontale à être toujours visible */
            overflow-y: auto; /* Garde le défilement vertical normal */
            background-color: var(--surface-color);
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            /* Assure que la barre de défilement horizontale est visible */
            scrollbar-gutter: stable;
        }

        /* Force l'affichage de la barre de défilement horizontale sur tous les navigateurs */
        .planning-container::-webkit-scrollbar {
            height: 12px;
        }

        .planning-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 6px;
        }

        .planning-container::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 6px;
        }

        .planning-container::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }

        table.planning-grid {
            width: 100%;
            border-collapse: collapse;
            table-layout: fixed;
            min-width: 2800px;
        }

        .planning-grid th, .planning-grid td {
            border: 1px solid var(--border-color);
            padding: 0.5rem;
            text-align: center;
            font-size: 0.8rem;
        }

        .planning-grid th {
            font-weight: 600;
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        .planning-grid th.main-header { background-color: #e2e2e2; top: 0; }
        .planning-grid th.sub-header { background-color: #f2f2f2; top: 41px; }

        .planning-grid .date-col {
            min-width: 100px;
            font-weight: 500;
            background-color: var(--surface-color);
            position: sticky;
            left: 0;
            z-index: 25;
        }
        
        .inventory-col {
            font-weight: bold;
            background-color: #e6f7ff !important;
        }

        .col-group-small { background-color: #fafafa; }
        .col-group-15m { background-color: #f0f9ff; }
        .col-group-20m { background-color: #f7fee7; }
        .col-group-25m { background-color: #faf5ff; }

        .planning-grid .weekend {
            box-shadow: inset 0 0 0 2000px rgba(0, 0, 0, 0.05);
        }
        .planning-grid .holiday {
            box-shadow: inset 0 0 0 2000px rgba(180, 83, 9, 0.1);
        }
        .planning-grid .weekend.holiday {
            box-shadow: inset 0 0 0 2000px rgba(180, 83, 9, 0.15);
        }
        .planning-grid tbody tr:hover td {
            box-shadow: inset 0 0 0 2000px rgba(0, 0, 0, 0.08);
        }

        /* --- EVENTS --- */
        .event-block {
            position: absolute; z-index: 20; box-sizing: border-box;
            overflow: hidden; display: flex; flex-direction: column;
            padding: 6px; font-size: 0.85em; border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.15); cursor: pointer;
        }

        .event-block.preparation-period {
            background-color: var(--preparation-bg);
            border-left: 5px solid var(--secondary-color);
            z-index: 15;
        }

        .event-block.manifestation-period {
            color: white; background-color: #3b82f6; border-left: 5px solid #1d4ed8;
        }
        .event-block.manifestation-period:hover { background-color: #2563eb; }
        .event-block .event-line { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; line-height: 1.3; }
        .event-block .event-contrat { font-weight: 700; }
        .event-block .event-ville { font-weight: 600; }
    </style>
</head>
<body>
    <div class="controls-container">
        <h1>Ajouter une Réservation</h1>
        <form id="reservationForm" class="form-grid">
            <div class="form-field">
                <label for="contrat">Contrat N°</label>
                <input type="text" id="contrat" placeholder="ex: DLR42665" required>
            </div>
            <div class="form-field">
                <label for="ville">Ville</label>
                <input type="text" id="ville" placeholder="ex: Paris" required>
            </div>
             <div class="form-field">
                <label for="structure">Structure</label>
                <select id="structure" required>
                    <option value="15M">15M</option>
                    <option value="20M">20M</option>
                    <option value="25M">25M</option>
                    <option value="10M_H5">10M H5</option>
                    <option value="10M_H4">10M H4</option>
                    <option value="12M">12M</option>
                </select>
            </div>
            <div class="form-field">
                <label for="longueur">Longueur (m)</label>
                <select id="longueur" required></select>
            </div>
            <div class="form-field">
                <label for="hauteur">Hauteur</label>
                <select id="hauteur" required>
                    <option value="H3">H3</option>
                    <option value="H4">H4</option>
                </select>
            </div>
             <div class="form-field">
                <label for="plancher">Plancher</label>
                <select id="plancher" required>
                    <option value="AP">AP (Avec Plancher)</option>
                    <option value="SP">SP (Sans Plancher)</option>
                </select>
            </div>
            <div class="form-field">
                <label for="dateManif">Date(s) Manifestation</label>
                <input type="text" id="dateManif" placeholder="Sélectionner une plage de dates" required>
            </div>
            <div class="form-field">
                <label for="dateMontage">Date(s) Montage</label>
                <input type="text" id="dateMontage" placeholder="Sélectionner une plage de dates" required>
            </div>
            <div class="form-field">
                <label for="dateDemontage">Date(s) Démontage</label>
                <input type="text" id="dateDemontage" placeholder="Sélectionner une plage de dates" required>
            </div>
            <div class="form-field">
                <label for="delaiPrep">Délai Préparation (jours)</label>
                <input type="number" id="delaiPrep" value="4" min="0" required>
            </div>
            <div class="form-field">
                <label for="dispo">Demande de dispo</label>
                <select id="dispo" required>
                    <option value="Non" selected>Non</option>
                    <option value="Oui">Oui</option>
                </select>
            </div>
            <div class="form-actions">
                <button type="submit">Ajouter au Planning</button>
            </div>
        </form>
    </div>

    <div class="planning-controls">
        <div class="nav-controls">
            <h2 id="currentMonthYear"></h2>
        </div>
        <div class="view-switcher">
            <button id="dayViewBtn">Jour</button>
            <button id="weekViewBtn" class="active">Semaine</button>
        </div>
    </div>
    
    <div class="planning-container" id="planningContainer">
        <table class="planning-grid" id="planningGrid"></table>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const structureInventory = {
                "10M_H5": { name: "10*10 Arquée H5", cols: 1, startCol: 1, cssClass: 'col-group-small' },
                "10M_H4": { name: "10*50 Arquée H4", cols: 1, startCol: 2, cssClass: 'col-group-small' },
                "12M":    { name: "12*25 Arquée H3", cols: 1, startCol: 3, cssClass: 'col-group-small' },
                "15M":    { name: "15M Arquée",      cols: 8, startCol: 4, cssClass: 'col-group-15m', sub: ["H3", "H3", "H3", "H3", "H3", "H3", "H3/H4", "H3/H4"], fermes: 51 },
                "20M":    { name: "20M Arquée",      cols: 7, startCol: 13, cssClass: 'col-group-20m', sub: ["H3", "H3", "H3", "H3", "H3/H4", "H3/H4", "H3/H4"], fermes: 54 },
                "25M":    { name: "25M Arquée",      cols: 3, startCol: 20, cssClass: 'col-group-25m', sub: ["H3", "H3", "H3"], fermes: 54 },
                "Domes":  { name: "Domes",           cols: 1, startCol: 24, cssClass: '' },
            };

            let reservations = [];
            let currentView = 'week';

            const planningContainer = document.getElementById('planningContainer');
            const planningGrid = document.getElementById('planningGrid');
            const currentMonthYearEl = document.getElementById('currentMonthYear');
            const form = document.getElementById('reservationForm');
            const longueurSelect = document.getElementById('longueur');

            populateLongueurOptions();
            initializeDatePickers(); 
            render();

            document.getElementById('weekViewBtn').addEventListener('click', () => switchView('week'));
            document.getElementById('dayViewBtn').addEventListener('click', () => switchView('day'));
            form.addEventListener('submit', handleFormSubmit);

            function initializeDatePickers() {
                const config = {
                    mode: "range", 
                    dateFormat: "d/m/Y", 
                    locale: flatpickr.l10ns.fr, // Utilisation correcte de la locale française
                    minDate: "01/01/2026", 
                    maxDate: "31/12/2026"
                };
                flatpickr("#dateManif", config);
                flatpickr("#dateMontage", config);
                flatpickr("#dateDemontage", config);
            }
            
            function switchView(view) {
                currentView = view;
                document.getElementById('weekViewBtn').classList.toggle('active', view === 'week');
                document.getElementById('dayViewBtn').classList.toggle('active', view === 'day');
                render();
            }

            function getFrenchPublicHolidays() {
                const holidays = new Set();
                // Utilisation d'UTC pour éviter les problèmes de fuseau horaire
                holidays.add('2026-01-01'); // Jour de l'An - Mercredi
                holidays.add('2026-04-06'); // Lundi de Pâques
                holidays.add('2026-05-01'); // Fête du Travail - Vendredi
                holidays.add('2026-05-08'); // Fête de la Victoire - Vendredi
                holidays.add('2026-05-14'); // Ascension - Jeudi
                holidays.add('2026-05-25'); // Lundi de Pentecôte
                holidays.add('2026-07-14'); // Fête Nationale - Mardi
                holidays.add('2026-08-15'); // Assomption - Samedi
                holidays.add('2026-11-01'); // Toussaint - Dimanche
                holidays.add('2026-11-11'); // Armistice - Mercredi
                holidays.add('2026-12-25'); // Noël - Vendredi
                return holidays;
            }

            function populateLongueurOptions() {
                longueurSelect.innerHTML = '';
                for (let i = 0; i <= 100; i += 5) {
                    const opt = document.createElement('option'); opt.value = i; opt.textContent = `${i}m`; longueurSelect.appendChild(opt);
                }
            }

            // MODIFICATION : Ajout de la fonction de calcul des fermes
            function calculateFermes(longueur) {
                if (longueur === 0) {
                    return 0;
                }
                // La formule est (longueur / 5) + 1
                return (longueur / 5) + 1;
            }
            
            function getDatesForView() {
                const dates = [], year = 2026;
                if (currentView === 'week') {
                    const firstSat = new Date(year, 0, 1);
                    while (firstSat.getDay() !== 6) firstSat.setDate(firstSat.getDate() + 1);
                    for (let d = new Date(firstSat); d.getFullYear() === year; d.setDate(d.getDate() + 7)) dates.push(new Date(d));
                } else {
                    for (let d = new Date(year, 0, 1); d.getFullYear() === year; d.setDate(d.getDate() + 1)) dates.push(new Date(d));
                }
                return dates;
            }

            function render() {
                planningGrid.innerHTML = '';
                currentMonthYearEl.textContent = 'Année 2026';
                generateGridHeader();
                generateGridBody(getDatesForView());
                renderReservations();
            }
            
            function generateGridHeader() {
                const thead = document.createElement('thead');
                const mainHeaderRow = document.createElement('tr'), subHeaderRow = document.createElement('tr');
                const createTh = (text, colspan = 1, className = '') => {
                    const th = document.createElement('th'); th.textContent = text; th.colSpan = colspan;
                    if (className) th.className = className; return th;
                };
                
                mainHeaderRow.appendChild(createTh(currentView === 'week' ? 'Semaine' : 'Date', 1, 'main-header')); subHeaderRow.appendChild(createTh('', 1, 'sub-header'));
                ['10M_H5', '10M_H4', '12M'].forEach(key => {
                    const s = structureInventory[key];
                    mainHeaderRow.appendChild(createTh(s.name, s.cols, `main-header ${s.cssClass}`));
                    subHeaderRow.appendChild(createTh('', 1, `sub-header ${s.cssClass}`));
                });
                const s15 = structureInventory['15M'];
                mainHeaderRow.appendChild(createTh(s15.name, s15.cols, `main-header ${s15.cssClass}`));
                s15.sub.forEach(sub => subHeaderRow.appendChild(createTh(sub, 1, `sub-header ${s15.cssClass}`)));
                mainHeaderRow.appendChild(createTh('Fermes', 1, 'main-header')); subHeaderRow.appendChild(createTh(s15.fermes, 1, 'sub-header')); // Affiche le stock total

                mainHeaderRow.appendChild(createTh(currentView === 'week' ? 'Semaine' : 'Date', 1, 'main-header')); subHeaderRow.appendChild(createTh('', 1, 'sub-header'));

                ['20M', '25M'].forEach(key => {
                     const s = structureInventory[key];
                    mainHeaderRow.appendChild(createTh(s.name, s.cols, `main-header ${s.cssClass}`));
                    s.sub.forEach(sub => subHeaderRow.appendChild(createTh(sub, 1, `sub-header ${s.cssClass}`)));
                });
                mainHeaderRow.appendChild(createTh('Fermes', 1, 'main-header')); subHeaderRow.appendChild(createTh(structureInventory['20M'].fermes, 1, 'sub-header')); // Affiche le stock total
                
                const sDomes = structureInventory['Domes'];
                mainHeaderRow.appendChild(createTh(sDomes.name, sDomes.cols, `main-header ${sDomes.cssClass}`));
                subHeaderRow.appendChild(createTh(sDomes.count, 1, `sub-header ${sDomes.cssClass}`));

                thead.appendChild(mainHeaderRow); thead.appendChild(subHeaderRow);
                planningGrid.appendChild(thead);
            }
            
            // MODIFICATION : La fonction generateGridBody est entièrement mise à jour pour calculer le stock restant
            function generateGridBody(dates) {
                const tbody = document.createElement('tbody');
                const holidays = getFrenchPublicHolidays();
                const totalFermes15M = structureInventory['15M'].fermes;
                const totalFermes20_25M = structureInventory['20M'].fermes; // 20M et 25M partagent le même stock

                dates.forEach(date => {
                    const tr = document.createElement('tr');
                    const localDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
                    const dateString = localDate.toISOString().slice(0, 10);
                    tr.dataset.date = dateString;
                    
                    // Calcul du stock de fermes restant pour cette date
                    let remainingFermes15M = totalFermes15M;
                    let remainingFermes20_25M = totalFermes20_25M;
                    reservations.forEach(res => {
                        if (dateString >= res.overallStartDate && dateString <= res.overallEndDate) {
                            if (res.structure === '15M') {
                                remainingFermes15M -= res.fermes;
                            } else if (res.structure === '20M' || res.structure === '25M') {
                                remainingFermes20_25M -= res.fermes;
                            }
                        }
                    });

                    const createCell = (className = '') => {
                        const td = document.createElement('td');
                        if(className) td.className = className;
                        return td;
                    }
                    
                    const displayDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());
                    const dateLocale = currentView === 'week' ? 
                        `Sem. ${displayDate.toLocaleDateString('fr-FR', { day: 'numeric', month: 'short' })}` : 
                        displayDate.toLocaleDateString('fr-FR', { weekday: 'short', day: 'numeric', month: 'short' });
                    tr.appendChild(createCell('date-col')).textContent = dateLocale;

                    ['10M_H5', '10M_H4', '12M', '15M'].forEach(key => {
                        const s = structureInventory[key];
                        for(let i = 0; i < s.cols; i++) tr.appendChild(createCell(s.cssClass));
                    });

                    // Affiche le stock restant de fermes 15M
                    const fermes15MCell = createCell('inventory-col');
                    fermes15MCell.textContent = remainingFermes15M;
                    tr.appendChild(fermes15MCell);
                    
                    tr.appendChild(createCell('date-col')).textContent = dateLocale;
                    
                    ['20M', '25M'].forEach(key => {
                        const s = structureInventory[key];
                        for(let i = 0; i < s.cols; i++) tr.appendChild(createCell(s.cssClass));
                    });
                    
                    // Affiche le stock restant de fermes 20M/25M
                    const fermes20_25MCell = createCell('inventory-col');
                    fermes20_25MCell.textContent = remainingFermes20_25M;
                    tr.appendChild(fermes20_25MCell);

                    tr.appendChild(createCell(structureInventory['Domes'].cssClass));
                    
                    if (displayDate.getDay() === 0 || displayDate.getDay() === 6) {
                        Array.from(tr.cells).forEach(c => c.classList.add('weekend'));
                    }
                    
                    if (holidays.has(dateString)) {
                        Array.from(tr.cells).forEach(c => c.classList.add('holiday'));
                    }

                    tbody.appendChild(tr);
                });
                planningGrid.appendChild(tbody);
            }

            function findAvailableColumn(sType, start, end) {
                const s = structureInventory[sType]; if (!s) return -1;
                const startDate = new Date(start), endDate = new Date(end);
                for (let i=0; i<s.cols; i++) {
                    const colIndex = s.startCol + i;
                    if (reservations.every(res => res.columnIndex !== colIndex || new Date(res.overallEndDate) < startDate || new Date(res.overallStartDate) > endDate)) return colIndex;
                }
                return -1;
            }
            
            function handleFormSubmit(event) {
                event.preventDefault();
                const parseDateRange = (id) => {
                    const val = document.getElementById(id).value; if (!val) return {};
                    const dates = val.split(' au ');
                    const toISO = (dmy) => { const p = dmy.split('/'); return `${p[2]}-${p[1].padStart(2, '0')}-${p[0].padStart(2, '0')}`; };
                    return { start: toISO(dates[0]), end: toISO(dates.length > 1 ? dates[1] : dates[0]) };
                };
                const manif = parseDateRange('dateManif'), montage = parseDateRange('dateMontage'), demontage = parseDateRange('dateDemontage');
                if (!manif.start || !montage.start || !demontage.start) { alert("Veuillez sélectionner des dates pour toutes les périodes."); return; }
                
                const longueurValue = parseInt(document.getElementById('longueur').value, 10);
                const data = {
                    id: Date.now(), contrat: document.getElementById('contrat').value, ville: document.getElementById('ville').value,
                    structure: document.getElementById('structure').value, longueur: longueurValue,
                    hauteur: document.getElementById('hauteur').value, plancher: document.getElementById('plancher').value,
                    dateManifStart: manif.start, dateManifEnd: manif.end, dateMontageStart: montage.start, dateMontageEnd: montage.end,
                    dateDemontageStart: demontage.start, dateDemontageEnd: demontage.end,
                    delaiPrep: parseInt(document.getElementById('delaiPrep').value, 10),
                    // MODIFICATION : On calcule et on stocke le nombre de fermes dans l'objet de réservation
                    fermes: calculateFermes(longueurValue)
                };

                if (new Date(data.dateMontageStart) > new Date(data.dateManifStart) || new Date(data.dateManifEnd) > new Date(data.dateDemontageStart)) {
                    alert("Les dates ne sont pas cohérentes. (Ordre: Montage -> Manif -> Démontage)"); return;
                }
                const prepStartDate = new Date(data.dateMontageStart);
                prepStartDate.setDate(prepStartDate.getDate() - data.delaiPrep);
                data.overallStartDate = prepStartDate.toISOString().slice(0, 10);
                data.overallEndDate = data.dateDemontageEnd;
                const availableColumn = findAvailableColumn(data.structure, data.overallStartDate, data.overallEndDate);
                if (availableColumn === -1) { alert(`Aucune colonne disponible pour la structure ${data.structure} sur cette période.`); return; }
                data.columnIndex = availableColumn;
                reservations.push(data);
                render();
                form.reset();
                populateLongueurOptions();
                initializeDatePickers(); 
            }
            
            function renderReservations() {
                document.querySelectorAll('.event-block').forEach(el => el.remove());
                reservations.forEach(res => {
                    createEventBlock(res, 'preparation', new Date(res.overallStartDate), new Date(res.dateMontageStart), res.columnIndex);
                    createEventBlock(res, 'manifestation', new Date(res.dateMontageStart), new Date(res.overallEndDate), res.columnIndex);
                });
            }
            
            function createEventBlock(res, type, startDate, endDate, column) {
                const block = document.createElement('div'), tableBody = planningGrid.querySelector('tbody');
                block.classList.add('event-block');
                if (!tableBody || tableBody.rows.length === 0) return;
                let startRowIndex = -1, endRowIndex = -1;
                const startISO = startDate.toISOString().slice(0, 10);
                const endISO = endDate.toISOString().slice(0, 10);
                
                for(let i=0; i<tableBody.rows.length; i++){
                    const rowDate = tableBody.rows[i].dataset.date;
                    if(startRowIndex === -1 && rowDate >= startISO) startRowIndex = i;
                    if(type === 'preparation' && rowDate >= endISO) { endRowIndex = i - 1; break; }
                    if(type === 'manifestation' && rowDate >= endISO){ endRowIndex = i; break; }
                }
                if (startRowIndex === -1) return; if (endRowIndex === -1) endRowIndex = tableBody.rows.length - 1;
                if (endRowIndex < startRowIndex) return;
                const durationRows = endRowIndex - startRowIndex + 1;
                if (durationRows <= 0) return;
                const startRowElement = tableBody.rows[startRowIndex], rowHeight = startRowElement.offsetHeight;
                const cell = startRowElement.cells[column];
                if (!cell) return;
                block.style.top = `${cell.offsetTop}px`; block.style.left = `${cell.offsetLeft}px`;
                block.style.width = `${cell.offsetWidth}px`; block.style.height = `${durationRows * rowHeight - 2}px`;
                if (type === 'preparation') {
                    block.classList.add('preparation-period'); block.innerHTML = `<span class="event-line">Préparation</span>`;
                } else {
                    block.classList.add('manifestation-period');
                    const formatRange = (s, e) => {
                         const sd = new Date(s + "T00:00:00").toLocaleDateString('fr-FR', { day: 'numeric', month: 'short' });
                         const ed = new Date(e + "T00:00:00").toLocaleDateString('fr-FR', { day: 'numeric', month: 'short' });
                         return sd === ed ? sd : `${sd} - ${ed}`;
                    };
                    block.innerHTML = `
                        <span class="event-line event-contrat">${res.contrat}</span>
                        <span class="event-line event-ville">${res.ville}</span>
                        <span class="event-line">${res.structure.replace('_', ' ')} ${res.longueur}m ${res.hauteur} ${res.plancher}</span>
                        <span class="event-line">M: ${formatRange(res.dateMontageStart, res.dateMontageEnd)}</span>
                        <span class="event-line">D: ${formatRange(res.dateDemontageStart, res.dateDemontageEnd)}</span>
                    `;
                }
                planningContainer.appendChild(block);
            }
        });
    </script>

</body>
</html>

</body>
</html>
